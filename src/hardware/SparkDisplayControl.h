/*
 * SparkDisplayControl.h
 *
 *  Created on: 23.08.2021
 *      Author: stangreg
 */

#ifndef SPARKDISPLAYCONTROL_H_
#define SPARKDISPLAYCONTROL_H_

#include "Config_Definitions.h"
#include <Adafruit_GFX.h>

// Definition of OLED driver in Config_Definitions.h
#if defined(OLED_DRIVER_SSD1306)
#include <Adafruit_SSD1306.h> //https://github.com/adafruit/Adafruit_SSD1306
#elif defined(OLED_DRIVER_SH1106) || defined(OLED_DRIVER_SH1107)
#include <Adafruit_SH110X.h> //https://github.com/adafruit/Adafruit_SH110x
#define WHITE SH110X_WHITE
#define BLACK SH110X_BLACK
#endif

#include "SparkDataControl.h"
#include "SparkLooperControl.h"
#include "SparkPresetControl.h"
#include "SparkTypes.h"

using namespace std;

class SparkDataControl;
class SparkLooperControl;

class SparkDisplayControl {
public:
    SparkDisplayControl();
    SparkDisplayControl(SparkDataControl *dc);
    virtual ~SparkDisplayControl();
    void init(int mode);
    void update(bool isInitBoot = false);
    void setDataControl(SparkDataControl *dc) {
        sparkDC_ = dc;
    }

private:
    // OLED Screen config

    static const int SCREEN_WIDTH;         // Display width
    static const int SCREEN_HEIGHT;        // Display height
    static const int OLED_RESET;           // Reset pin # (or -1 if sharing Arduino reset pin)
    static const int DISPLAY_MIN_X_FACTOR; // for text size 2, scales linearly with text size

    const int kSplashImageWidth = 128;
    const int kSplashImageHeight = 47;

#if defined(OLED_DRIVER_SSD1306)
    static Adafruit_SSD1306 display_;
#elif defined(OLED_DRIVER_SH1106)
    static Adafruit_SH1106G display_;
#elif defined(OLED_DRIVER_SH1107)
    static Adafruit_SH1107 display_;
#endif
    SparkDataControl *sparkDC_;

    string primaryLineText;
    Preset primaryLinePreset;
    string secondaryLineText;
    Preset secondaryLinePreset;
    string currentBTModeText;

    string lowerButtonsShort;
    string lowerButtonsLong;
    string upperButtonsShort;
    string upperButtonsLong;

    string lastKeyboardButtonPressedString;
    unsigned long keyboardPressedTimestamp = 0;
    int showKeyboardPressedInterval = 500;
    bool showKeyboardPressedFlag = false;

    bool isVolumeChanged = false;
    unsigned long volumeChangedTimestamp = 0;
    int showVolumeChangedInterval = 500;

    int logInterval = 5000;
    unsigned long lastLogTimestamp = 0;

    unsigned long previousMillis = 0;
    int showMessageInterval = 2000;
    bool showMsgFlag = false;

    // DISPLAY variables x1 for the first line, x2 for the second line
    int displayX1_ = 0;
    int displayMinX1_ = DISPLAY_MIN_X_FACTOR * 10;
    int displayScrollNum1_ = 1; // scroll speed, make bigger to speed up the scroll

    int displayX2_ = 0;
    int displayMinX2_ = DISPLAY_MIN_X_FACTOR * 10;
    int displayScrollNum2_ = 1; // scroll speed, make bigger to speed up the scroll

    const int textScrollLimit_ = 11;

    int textRow1Timestamp_ = 0;
    int textRow2Timestamp_ = 0;
    const int textScrollDelay_ = 2500;
    const string textFiller_ = "   ";
    string previousText1_ = "";
    string previousText2_ = "";

    bool invertedDisplay = false;

    string currentNote = "  ";
    int noteOffsetCents = 0;

    void showInitialMessage();
    void showConnection();

#ifdef ENABLE_BATTERY_STATUS_INDICATOR
    void showBatterySymbol();
    int changeBatterySymbolInteral = 500;
    unsigned long lastBatteryRotationTimestamp = 0;
    unsigned int currentBatterySymbolIndex = 0;
    const unsigned char *rotateBatteryIcons();
#endif
    void showBankAndPresetNum();
    void showPresetName();
    void showFX_SecondaryName();
    void showLooperTimer();
    void showModeModifier();
    void updateTextPositions();

    void showPressedKey();
    void initKeyboardLayoutStrings();
    void showKeyboardLayout();

    void showTunerNote();
    void showTunerOffset();
    void showTunerGraphic();

    void showVolumeBar();

    void checkInvertDisplay(int subMode);

    void drawCentreString(const char *buf, int y, int offset = 0);
    void drawRightAlignedString(const char *buf, int y, int offset = 0);
    void drawTunerTriangleCentre(int x, int size, bool direction, int color = WHITE);
    void drawInvertBitmapColor(int16_t x, int16_t y, const uint8_t *bitmap,
                               int16_t w, int16_t h, uint16_t color);

    void logDisplay();

    // Icons
    const unsigned char epdBitmapIgnitronLogo[768] PROGMEM = {
        // 'Ignitron_logo_small, 128x47px
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xc3, 0xc0, 0x08, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00,
        0x7f, 0xff, 0xff, 0xff, 0xff, 0x82, 0x1f, 0x80, 0x1f, 0xdf, 0xfe,
        0x18, 0x60, 0x00, 0x00, 0x00, 0x3c, 0x47, 0xfe, 0xff, 0xbf, 0x81,
        0x8c, 0x00, 0x08, 0x01, 0x26, 0x06, 0x60, 0x00, 0x0f, 0xf8, 0x10,
        0x01, 0xe0, 0x04, 0x9f, 0xc7, 0xc8, 0x14, 0x00, 0x00, 0x02, 0x3f,
        0x0c, 0x34, 0x1f, 0xfe, 0x00, 0x78, 0x00, 0x00, 0x0f, 0xc7, 0xc0,
        0x7f, 0x80, 0xfc, 0x7c, 0x3f, 0x1f, 0xfe, 0x1f, 0xfe, 0x01, 0xfe,
        0x03, 0xf1, 0xe7, 0xc7, 0xc0, 0xff, 0xc0, 0xfc, 0xfc, 0x3f, 0x1f,
        0xfe, 0x0f, 0xff, 0x03, 0xff, 0x03, 0xf3, 0xf3, 0xc7, 0xc1, 0xff,
        0xc0, 0xfc, 0xfc, 0x3f, 0x1f, 0xfe, 0x0f, 0xbf, 0x07, 0xff, 0x83,
        0xf3, 0xf3, 0xc7, 0xc3, 0xff, 0xe0, 0xfe, 0xfc, 0x3f, 0x0f, 0xfc,
        0x1f, 0x9f, 0x07, 0xef, 0x83, 0xf3, 0xf3, 0xc7, 0xc3, 0xf3, 0xe0,
        0xfe, 0xfc, 0x3f, 0x01, 0xf0, 0x1f, 0x9f, 0x07, 0xcf, 0x83, 0xfb,
        0xf3, 0xc7, 0xc3, 0xf3, 0xe0, 0xfe, 0xfc, 0x3f, 0x01, 0xf0, 0x1f,
        0x9f, 0x0f, 0xcf, 0x83, 0xfb, 0xf3, 0xc7, 0xc3, 0xf3, 0xe0, 0xfe,
        0xfc, 0x3f, 0x01, 0xf0, 0x0f, 0xbf, 0x0f, 0xcf, 0x83, 0xf3, 0xf3,
        0xcf, 0xc3, 0xf0, 0x00, 0xfe, 0xfc, 0x3e, 0x01, 0xf0, 0x0f, 0xfe,
        0x07, 0xcf, 0x83, 0xfb, 0xf3, 0xc7, 0x83, 0xf0, 0x00, 0xff, 0x7c,
        0x3e, 0x01, 0xf0, 0x1f, 0xfc, 0x0f, 0xcf, 0x83, 0xff, 0xf3, 0xc7,
        0xc3, 0xef, 0xe0, 0xff, 0xfc, 0x3f, 0x01, 0xf0, 0x0f, 0xfe, 0x0f,
        0xcf, 0x83, 0xff, 0xf3, 0xc7, 0xc3, 0xef, 0xe0, 0xff, 0xfc, 0x3f,
        0x01, 0xf0, 0x1f, 0xff, 0x0f, 0xcf, 0x83, 0xff, 0xf3, 0xc7, 0xc3,
        0xff, 0xe0, 0xff, 0xfc, 0x3f, 0x01, 0xe0, 0x0f, 0x9f, 0x0f, 0xcf,
        0x83, 0xff, 0xf3, 0xc7, 0xc3, 0xef, 0xe0, 0xfb, 0xfc, 0x3f, 0x01,
        0xf0, 0x0f, 0x9f, 0x07, 0xcf, 0x83, 0xef, 0xf3, 0xc7, 0xc3, 0xf3,
        0xe0, 0xfb, 0xfc, 0x3f, 0x01, 0xf0, 0x1f, 0x9f, 0x0f, 0xcf, 0x83,
        0xef, 0xf1, 0xc7, 0xc3, 0xf3, 0xe0, 0xfb, 0xfc, 0x3f, 0x01, 0xf0,
        0x1f, 0x9f, 0x0f, 0xcf, 0x83, 0xef, 0xf1, 0xc7, 0xc1, 0xe3, 0xe0,
        0xfb, 0xfc, 0x3f, 0x03, 0xf1, 0x1f, 0x9f, 0x0f, 0xcf, 0x83, 0xef,
        0xf1, 0xc7, 0xc3, 0xf3, 0xe0, 0xf9, 0xfc, 0x3f, 0x01, 0xf1, 0x9f,
        0x9e, 0x07, 0xcf, 0x83, 0xe7, 0xf1, 0xc7, 0xc3, 0xff, 0xe0, 0xf9,
        0xfc, 0x3e, 0x01, 0xf1, 0x9f, 0x9e, 0x07, 0xff, 0x83, 0xe7, 0xf1,
        0x87, 0xc1, 0xff, 0xe0, 0xf9, 0xfc, 0x3f, 0x01, 0xf0, 0x9f, 0x9f,
        0x07, 0xff, 0x03, 0xe7, 0xf3, 0x87, 0xc1, 0xff, 0xe0, 0xf8, 0xfc,
        0x3e, 0x03, 0xf0, 0xcf, 0x9f, 0x03, 0xfe, 0x03, 0xe3, 0xf3, 0xc0,
        0x00, 0xfb, 0xe0, 0xf8, 0xfc, 0x00, 0x01, 0xf0, 0xc0, 0x00, 0x00,
        0xfc, 0x03, 0xe3, 0xf3, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0xc0, 0x00, 0x1e, 0x00, 0x30, 0x00, 0x03, 0xfc, 0x60,
        0x00, 0x03, 0x1f, 0xc3, 0xb1, 0xc0, 0x00, 0xe0, 0x00, 0xff, 0xec,
        0x3c, 0x7f, 0x4f, 0xff, 0xf8, 0x00, 0x03, 0xff, 0xff, 0xfb, 0xc0,
        0x3f, 0xe0, 0x3b, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xd6,
        0x03, 0xff, 0xff, 0xff, 0xcf, 0xff, 0xf7, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff};

    // 'bluetooth_logo', 15x17px
    const unsigned char epdBitmapBTLogo[36] PROGMEM = {0x00, 0x00, 0x00,
                                                       0x00, 0x01, 0x00, 0x01, 0x80, 0x01, 0xc0, 0x09, 0x20, 0x07, 0x40,
                                                       0x03, 0xc0, 0x03, 0x80, 0x03, 0x80, 0x07, 0xc0, 0x0d, 0x20, 0x09,
                                                       0x60, 0x01, 0xc0, 0x01, 0x80, 0x01, 0x00, 0x00, 0x00};

#ifdef ENABLE_BATTERY_STATUS_INDICATOR
    // Battery Symbols, 9x15px
    // 90-100%
    const unsigned char epdBitmapBatteryLevel3[30] PROGMEM = {
        0x3e, 0x00, 0x3e, 0x00, 0xff, 0x80, 0xff, 0x80, 0xff, 0x80, 0xff, 0x80, 0xff, 0x80, 0xff, 0x80,
        0xff, 0x80, 0xff, 0x80, 0xff, 0x80, 0xff, 0x80, 0xff, 0x80, 0xff, 0x80, 0xff, 0x80};
    // 50-90%
    const unsigned char epdBitmapBatteryLevel2[30] PROGMEM = {
        0x3e, 0x00, 0x22, 0x00, 0xe3, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xff, 0x80, 0xff, 0x80,
        0xff, 0x80, 0xff, 0x80, 0xff, 0x80, 0xff, 0x80, 0xff, 0x80, 0xff, 0x80, 0xff, 0x80};
    // 10-50%
    const unsigned char epdBitmapBatteryLevel1[30] PROGMEM = {
        0x3e, 0x00, 0x22, 0x00, 0xe3, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
        0x80, 0x80, 0x80, 0x80, 0xff, 0x80, 0xff, 0x80, 0xff, 0x80, 0xff, 0x80, 0xff, 0x80};
    // 0-10%
    const unsigned char epdBitmapBatteryLevel0[30] PROGMEM = {
        0x3e, 0x00, 0x22, 0x00, 0xe3, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x88, 0x80, 0x88, 0x80,
        0x88, 0x80, 0x80, 0x80, 0x88, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xff, 0x80};

    // 'PowerPlugIcon, 9x15px
    const unsigned char epdBitmapBatteryPlug[30] PROGMEM = {
        0x66, 0x00, 0x66, 0x00, 0x66, 0x00, 0x66, 0x00, 0xff, 0x00, 0xff, 0x00, 0x7e, 0x00, 0x7e, 0x00,
        0x7e, 0x00, 0x3c, 0x00, 0x18, 0x00, 0x18, 0x00, 0x18, 0x00, 0x18, 0x00, 0x18, 0x00};
#endif
};

#endif /* SPARKDISPLAYCONTROL_H_ */
